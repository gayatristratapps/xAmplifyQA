# Name of your workflow - this is what you'll see in the GitHub Actions tab
name: Selenium CI/CD Pipeline

# When this workflow should run
on:
  # Trigger on a push to the 'master' (or 'main') branch
  push:
    branches:
      - master 

  # Trigger on a pull request targeting the 'master' (or 'main') branch
  pull_request:
    branches:
      - master 

# A workflow is made of one or more 'jobs'
jobs:
  # This is the name of your first (and only, for now) job
  run-selenium-tests:
    # The type of machine to run the job on. 'ubuntu-latest' is a Linux machine.
    runs-on: ubuntu-latest

    # Steps are a sequence of tasks that will be executed
    steps:
      # Step 1: Check out your repository code
      # This action downloads your repository onto the runner machine.
      - name: Checkout Code
        uses: actions/checkout@v4 # 'actions/checkout@v4' is a pre-built GitHub Action

      # Step 2: Set up Java Development Kit (JDK)
      # Your Java project needs Java to build and run.
      - name: Set up JDK 11 # Use the Java version your project uses (e.g., 8, 11, 17)
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin' # A common and reliable JDK distribution
          cache: maven # This helps speed up builds by caching Maven dependencies

      # Step 3: Install Google Chrome
      # Selenium needs a browser to run. Ubuntu (the runner machine) doesn't have Chrome pre-installed by default for headless use.
      # We install it here.
      - name: Install Google Chrome
        run: |
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable

      # Step 4: Run your Maven tests
      # This command actually executes your Selenium tests using Maven.
      # Maven's 'test' phase automatically runs tests defined in src/test/java.
      - name: Run Maven Tests
        run: mvn test # This command tells Maven to run your tests

      # Step 5: Upload Test Results (Optional, but good practice for viewing later)
      # This step takes the test reports generated by Maven (usually in target/surefire-reports)
      # and makes them available as "artifacts" in your GitHub Actions run.
      - name: Upload Test Results
        if: always() # This step will always run, even if previous steps fail
        uses: actions/upload-artifact@v4
        with:
          name: test-results # The name for your artifact
          path: target/surefire-reports # Path to your test reports (Maven Surefire output)
